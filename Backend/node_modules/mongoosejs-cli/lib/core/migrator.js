'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMigrator = getMigrator;
exports.ensureCollectionSchema = ensureCollectionSchema;

var _umzug = require('umzug');

var _umzug2 = _interopRequireDefault(_umzug);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _helpers = require('../helpers/');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getMigrator(type, args) {
  var _require = require(_helpers2.default.config.getModelsIndexFile());

  const models = _require.models;

  const mongoose = require(_helpers2.default.config.getModelsIndexFile());

  return _bluebird2.default.try(() => {
    if (!(_helpers2.default.config.configFileExists() || args.url)) {
      _helpers2.default.view.error('Cannot find "' + _helpers2.default.config.getConfigFile() + '". Have you initialized mongoosejs-cli in your project by running "mongoose init"?');
      process.exit(1);
    }
    const sOptions = {};
    sOptions.connection = mongoose.connection;

    const migrator = new _umzug2.default({
      storage: _helpers2.default.umzug.getStorage(type),
      storageOptions: _helpers2.default.umzug.getStorageOptions(type, sOptions),
      logging: _helpers2.default.view.log,
      migrations: {
        params: [models, mongoose],
        path: _helpers2.default.path.getPath(type),
        pattern: /\.js$/,
        wrap: fun => {
          if (fun.length === 3) {
            return _bluebird2.default.promisify(fun);
          } else {
            return fun;
          }
        }
      }
    });

    try {
      return migrator;
    } catch (e) {
      _helpers2.default.view.error(e);
    }
  });
}

function ensureCollectionSchema(migrator) {
  const connection = migrator.options.storageOptions.connection;
  const collectionName = migrator.options.storageOptions.collectionName;

  return ensureCollection(connection, collectionName).then(collection => {
    const fields = Object.keys(collection);

    if (fields.length === 3 && (fields.indexOf('createdAt') || fields.indexOf('created_at')) >= 0) {
      return;
    }
  }).catch(() => {});
}

function ensureCollection(connection, collectionName) {
  return connection.then(() => {

    if (!connection.collections[collectionName]) {
      throw new Error(`No migrations collection for ${collectionName} was found.`);
    }

    return;
  });
}